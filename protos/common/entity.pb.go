// Code generated by protoc-gen-go. DO NOT EDIT.
// source: entity.proto

package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	UserName             string   `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Sex                  int64    `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_entity_857471e007a661ef, []int{0}
}


func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetSex() int64 {
	if m != nil {
		return m.Sex
	}
	return 0
}

type Users struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_entity_857471e007a661ef, []int{1}
}

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type MapData struct {
	Cache                map[string]string `protobuf:"bytes,1,rep,name=cache,proto3" json:"cache,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MapData) Reset()         { *m = MapData{} }
func (m *MapData) String() string { return proto.CompactTextString(m) }
func (*MapData) ProtoMessage()    {}
func (*MapData) Descriptor() ([]byte, []int) {
	return fileDescriptor_entity_857471e007a661ef, []int{2}
}

func (m *MapData) GetCache() map[string]string {
	if m != nil {
		return m.Cache
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "common.User")
	proto.RegisterType((*Users)(nil), "common.Users")
	proto.RegisterType((*MapData)(nil), "common.MapData")
}

func init() { proto.RegisterFile("entity.proto", fileDescriptor_entity_857471e007a661ef) }

var fileDescriptor_entity_857471e007a661ef = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x31, 0x4b, 0xc0, 0x30,
	0x14, 0x84, 0x49, 0x63, 0xaa, 0x3e, 0x3b, 0x48, 0x70, 0x08, 0x9d, 0x4a, 0xa6, 0x82, 0x10, 0x44,
	0x97, 0xe2, 0xaa, 0x8e, 0x8a, 0x04, 0xfc, 0x01, 0xb1, 0x3e, 0x50, 0xb4, 0x4d, 0x49, 0x52, 0xb5,
	0xff, 0x5e, 0x9e, 0x49, 0x75, 0xbb, 0xcb, 0x77, 0x5c, 0x8e, 0x07, 0x0d, 0xce, 0xe9, 0x2d, 0x6d,
	0x66, 0x09, 0x3e, 0x79, 0x59, 0x8f, 0x7e, 0x9a, 0xfc, 0xac, 0x1f, 0xe1, 0xe0, 0x29, 0x62, 0x90,
	0x2d, 0x1c, 0xad, 0x11, 0xc3, 0x83, 0x9b, 0x50, 0xb1, 0x8e, 0xf5, 0xc7, 0xf6, 0xcf, 0x13, 0x5b,
	0x5c, 0x8c, 0x5f, 0x3e, 0xbc, 0xa8, 0x2a, 0xb3, 0xdd, 0xcb, 0x53, 0xe0, 0x11, 0xbf, 0x15, 0xef,
	0x58, 0xcf, 0x2d, 0x49, 0x7d, 0x0e, 0x82, 0x1a, 0xa3, 0xd4, 0x20, 0xa8, 0x22, 0x2a, 0xd6, 0xf1,
	0xfe, 0xe4, 0xb2, 0x31, 0xf9, 0x4b, 0x43, 0xd4, 0x66, 0xa4, 0x57, 0x38, 0xbc, 0x77, 0xcb, 0xad,
	0x4b, 0x4e, 0x5e, 0x80, 0x18, 0xdd, 0xf8, 0x8a, 0x25, 0xde, 0xee, 0xf1, 0xc2, 0xcd, 0x0d, 0xc1,
	0xbb, 0x39, 0x85, 0xcd, 0xe6, 0x60, 0x3b, 0x00, 0xfc, 0x3f, 0xd2, 0x92, 0x77, 0xdc, 0xca, 0x78,
	0x92, 0xf2, 0x0c, 0xc4, 0xa7, 0xfb, 0x58, 0xb1, 0x8c, 0xce, 0xe6, 0xba, 0x1a, 0xd8, 0x73, 0xfd,
	0x7b, 0x84, 0xab, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0xbf, 0x70, 0xbc, 0x14, 0x01, 0x00,
	0x00,
}
